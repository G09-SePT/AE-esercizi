.constant
OBJREF 0x40			// needed for method invokation
// ***********************************************************
// modificare le costanti sottostanti a piacimento. Si noti che 
// l'aggiunta di un addendo comporta la modifica del metodo 
// stampaStringa
// ***********************************************************
NCIFRE 11			// numero massimo di cifre per ogni addendo
FLAG 1				// 0 per evitare la stampa delle cifre in input sulla console, FLAG >= 1 altrimenti
ADDENDI 2			// numero di addendi da sommare
.end-constant

.main	// start of program
.var
#var	// variabile contatore
.end-var
start:	BIPUSH 0
	DUP		// lascio uno 0 sullo stack per poterlo sommare con il primo addendo letto successivamente
	ISTORE #var	// assegno 0 a #var, #var = 0

// ------------ (start) input operandi -----------------------------------------
// =============================================================================
// il seguente ciclo while viene ripetuto tante volte quante sono gli operandi
// da leggere e sommare. Si noti che la somma tra l'operando appena letto e la
// somma di tutti gli operandi precedenti avviene ad ogni iterazione, si sfrutta
// l'indirizzamento a stack
// =============================================================================
inizio:	ILOAD #var
	LDC_W ADDENDI		
	IF_ICMPEQ work			// while (#var != ADDENDI) {
	IINC #var 1			//	#var++
	LDC_W OBJREF			// prepare for method call
        ILOAD #var			// indica il numero di operando da inserire
        INVOKEVIRTUAL stampaStringa	// stampa stringa di input per interazione utente
        POP 				// elimino il valore ritornato da stampaStringa
        LDC_W OBJREF			// prepare for method call
        LDC_W NCIFRE			
        LDC_W FLAG
        INVOKEVIRTUAL getnumbase8	// legge un numero ottale in input e lo ritorna sulla cima dello stack
        BIPUSH 0xA
        OUT    				// newline
        IADD				// a ogni iterazione sommo l'operando ottale appena letto con la somma degli operandi già inseriti
        GOTO inizio			// }
// ------------ (end) input operandi -----------------------------------------        

// ------------ (start) somma operandi: overflow o stampo? -------------------
// ===========================================================================
// controllo che la somma degli operandi in input non sia negativa e la 
// stampo, altrimenti segnalo l'overflow stampando un messaggio
// ===========================================================================          
work:   DUP			// duplico la somma di tutti gli operandi sullo stack
        IFLT error		// controllo la somma: se è negativa vai alla label error, altrimenti vai all'istruzione successiva
        LDC_W OBJREF		// prepare for method call
        SWAP			// scambio OBJREF con la somma degli operandi
	INVOKEVIRTUAL stampabin	// sono sicuro che la somma non ha comportato overflow, quindi stampo in binario la somma
	POP 			// elimino il valore ritornato da stampabin
	BIPUSH 0xA
        OUT    			// newline
// ------------ (end) somma operandi: overflow o stampo? ------------------- 

// ----------------- (start) richiesta all'utente --------------------------
// =========================================================================
// chiedo all'utente se vuole eseguire una nuova somma
// =========================================================================
repeat:	LDC_W OBJREF			// prepare for method call
	INVOKEVIRTUAL provaStampa	// stampo richiesta per poter effettuare una nuova somma
	POP 				// elimino il valore ritornato da provaStampa
	LDC_W OBJREF			// prepare for method call
	INVOKEVIRTUAL getcifrabin	// leggo risposta dell'utente, 
	BIPUSH 0x30			// 0
	IF_ICMPEQ fine			// se la risosta è 0 termino programma, altrimenti torno alla label start
	BIPUSH 0xA
        OUT    				// newline
	GOTO start			// la risposta <> 0, torna alla label start
// ----------------- (end) richiesta all'utente ----------------------------

// ----------------- (start) overflow :( -----------------------------------
// =========================================================================
// segnalo l'avvenuto overflow con un messaggio
// =========================================================================
error:	POP				// rimuovo l'ultima somma degli operandi rimasta sullo stack, una è già stata rimossa con la IFLT che ha portato a questa label
	LDC_W OBJREF			// prepare for method call
	INVOKEVIRTUAL printError	// stampo messaggio di errore, per segnalare l'OVERFLOW
	POP				// elimino il valore ritornato da printError
	GOTO repeat			// salto alla label repeat
// ----------------- (end) overflow :( -------------------------------------
fine:   HALT
.end-main

// ************************************************************
// stampa a video il messaggio di avvenuto overflow, "OVERFLOW"
// ************************************************************
.method printError()
	BIPUSH 0x4f	//O
	OUT
	BIPUSH 0x56	//V
	OUT
	BIPUSH 0x45	//E
	OUT
	BIPUSH 0x52	//R
	OUT
	BIPUSH 0x46	//F
	OUT
	BIPUSH 0x4c	//L
	OUT
	BIPUSH 0x4f	//O
	OUT
	BIPUSH 0x57	//W
	OUT
	BIPUSH 0x21	//!
	OUT
	BIPUSH 0xa	//
	OUT
	BIPUSH 0 	// Ritorna un valore fittizio 
        IRETURN
.end-method

// *************************************************************
// stampa la rappresentazione binaria di un numero passato
// come parametro.
// Per realizzare la stampa si usano due numeri: uno è
// quello che deve essere stampato, l'altro è un numero
// fittizio, ma diverso da 0, che viene moltiplicato per 2
// (<< 1) fino a che non diventa nullo. A ogni iterazione
// oltre a moltiplicare il numero fittizio, si moltiplica 
// per 2 il valore da stampare. Se ne controlla la positività
// o meno (bit più significativo) per sapere se stampare 1
// (negativo) o 0 (positivo).
// Ci si riferisce sempre a numero fittizio o x, ma in realtà
// questi due non cambiano dato che x non è mai modificato e
// il numero fittizio non è neanche una variabile, questo
// perché si preferisce utilizzare l'indirizzamento a stack
// *************************************************************
.method stampabin(x)
	BIPUSH -1	// numero fittizio, diverso da 0
	ILOAD x		// numero da stampare
// do {
ciclo:	DUP
	IFLT 1case	// controllo se il bit più significativo di x è 1 (x è negativo)
	BIPUSH 0x30	// 0, il bit più significativo di x è 0, allora x è positivo
print:	OUT
	SWAP		// scambio x con il numero fittizio
	DUP		
	IADD		// numero fittizio * 2 == numero fittizio + numero fittizio
	DUP
	IFEQ fine	// if (numero fittizio == 0) goto fine;
			// se numero fittizio * 2 == 0, allora ho finito, altrimenti no. Si noti che si fa 
			// prima il controllo sul numero fittizio e solo successivamente si moltiplica 
			// per due il valore di x. Questo perché si vuole risparmiare alcune istruzioni: infatti
			// se  numero fittizio * 2 == 0 ==> x * 2 == 0, per tanto ho stampato tutte le cifre
			// binarie che compongo x, salto alla label fine
	SWAP		// scambio numero fittizio con x
	DUP
	IADD		// x * 2
	GOTO ciclo	// } while (true);
	
1case:	BIPUSH 0x31	// 1, il bit più significativo di x è 1, allora x è negativo
	GOTO print
	
fine:	IRETURN
.end-method

// *************************************************************
// compone un numero ottale di ncifre, le quali possono essere
// stampate nel caso in cui flag != 0.
// Si noti che non si fa uso della variabile "val", come è 
// indicato nel PDF dell'esercizio, perché si sfrutta 
// l'indirizzamento a stack
// NB: il codice qui proposto non fa controlli se il numero in
//     input è positivo o no, si fida dell'utente :)
// *************************************************************
.method getnumbase8(ncifre,flag)
		BIPUSH 0
ciclo:		ILOAD ncifre
		IFEQ fine			// while (ncifre != 0) {
		ISHL3				// mem[SP] << 3
		LDC_W OBJREF			// prepare for method call
		INVOKEVIRTUAL getcifrabase8	// leggo numero ottale da tastiera
		ILOAD flag
		IFEQ saltastampa		// controllo se il flag == 0
		DUP
		OUT				// flag != 0, allora stampo il numero ottale letto
saltastampa:	BIPUSH 0x30			// 0
		ISUB				// passo da codice ASCII in hex a numero ottale
		IADD				// sommo il numero ottale letto con il numero ottale finora composto, che si trova in mem[SP - 1]
		IINC ncifre -1
		GOTO ciclo			// }
fine:		IRETURN				// ritorno il numero ottale di ncifre letto
.end-method

// *************************************************************
// legge un carattere digitato da tastiera e lo ritorna se e
// soltanto se è un numero in base ottale
// *************************************************************
.method getcifrabase8()
leggi:	IN			// leggo il carattere digitato da tastiera
	DUP			
	IFEQ fail		// controllo se la lettura è avvenuta (TOS != 0)
	DUP			
	BIPUSH 0x30		// 0
	IF_ICMPLT fail		// scarto i caratteri con codifica ASCII < 0x30. Si noti l'utilizzo dell'istruzione implementata nell'esercizio 1
	DUP				
	BIPUSH 0x38		// 8
	IF_ICMPLT return	// scarto i caratteri con codifica ASCII >= 0x38. Si noti l'utilizzo dell'istruzione implementata nell'esercizio 1
	
fail:	POP			// scarto qualsiasi carattere che non faccia parte della base ottale
	GOTO leggi		// busy waiting: attendo un altro carattere da tastiera
	
return:	IRETURN			// restituisce un codice ASCII compreso tra 0x30 e 0x37 (estremi inclusi)
.end-method

// *************************************************************
// stampa stringa che richiede all'utente l'inserimento dell'
// ennesimo addendo. Il parametro num indica al metodo di
// richiedere il num-esimo addendo. Si noti che al fine di
// stampare correttamente il num-esimo addendo sarà necessario
// scrivere il codice che indichi il numero in parola
// *************************************************************
.method stampaStringa(num)
	BIPUSH 0x49     //I
        OUT
        BIPUSH 0x6e     //n
        OUT
        BIPUSH 0x73     //s
        OUT
        BIPUSH 0x65     //e
        OUT
        BIPUSH 0x72     //r
        OUT
        BIPUSH 0x69     //i
        OUT
        BIPUSH 0x72     //r
        OUT
        BIPUSH 0x65     //e
        OUT
        BIPUSH 0x20     // 
        OUT
        BIPUSH 0x69     //i
        OUT
        BIPUSH 0x6c     //l
        OUT
        BIPUSH 0x20     // 
        OUT
        ILOAD num
        BIPUSH 1
        IF_ICMPEQ uno	// controllo se num == 1
        
// ---------------- (start) num != 1 ----------------
// ==================================================
// il numero da inserire non è 1 allora sarà 2,
// perché il massimo numero di operandi (si veda la
// costante ADDENDI) è 2. Se ADDENDI == 3, allora
// in questo caso bisognerebbe verificare se num è 2 o
// 3. Per 3 si stamperà la stringa "terzo", per 4
// "quarto" e così via
// NB: con ADDENDI >= 3 si richiede una modifica del
//     codice
// ================================================== 
	BIPUSH 0x73     //s
        OUT
        BIPUSH 0x65     //e
        OUT
        BIPUSH 0x63     //c
        OUT
        BIPUSH 0x6f     //o
        OUT
        BIPUSH 0x6e     //n
        OUT
        BIPUSH 0x64     //d
        OUT
        BIPUSH 0x6f     //o
        OUT
        GOTO jump
// ---------------- (end) num != 1 ------------------

// ---------------- (start) num == 1 ----------------
uno:    BIPUSH 0x70     //p
        OUT
        BIPUSH 0x72     //r
        OUT
        BIPUSH 0x69     //i
        OUT
        BIPUSH 0x6d     //m
        OUT
        BIPUSH 0x6f     //o
        OUT
// ---------------- (end) num == 1 ------------------

jump:  	BIPUSH 0x20     // 
        OUT
        BIPUSH 0x6e     //n
        OUT
        BIPUSH 0x75     //u
        OUT
        BIPUSH 0x6d     //m
        OUT
        BIPUSH 0x65     //e
        OUT
        BIPUSH 0x72     //r
        OUT
        BIPUSH 0x6f     //o
        OUT
        BIPUSH 0x20     // 
        OUT
        BIPUSH 0x6f     //o
        OUT
        BIPUSH 0x74     //t
        OUT
        BIPUSH 0x74     //t
        OUT
        BIPUSH 0x61     //a
        OUT
        BIPUSH 0x6c     //l
        OUT
        BIPUSH 0x65     //e
        OUT
        BIPUSH 0x20     // 
        OUT
        BIPUSH 0x28     //(
        OUT
        BIPUSH 0x31     //1
        OUT
        BIPUSH 0x31     //1
        OUT
        BIPUSH 0x20     // 
        OUT
        BIPUSH 0x63     //c
        OUT
        BIPUSH 0x69     //i
        OUT
        BIPUSH 0x66     //f
        OUT
        BIPUSH 0x72     //r
        OUT
        BIPUSH 0x65     //e
        OUT
        BIPUSH 0x29     //)
        OUT
        BIPUSH 0x3a     //:
        OUT
        BIPUSH 0xA
        OUT    		// newline
	BIPUSH 0 	// Ritorna un valore fittizio 
        IRETURN
.end-method

// *************************************************************
// legge caratteri da tastiera e ritorna solo se viene inserito
// '0' oppure '1'; viene restituito il carattere '0' o '1' letto
// *************************************************************
.method getcifrabin() 
                 
leggicarattere: IN
		DUP
		IFEQ nulla
		DUP
		BIPUSH 0x30		// controlla se il carattere è == 0x30 (codice ASCII di '0')
		IF_ICMPEQ fine		// se è stato inserito '0' lo restituisce al chiamante
		DUP
		BIPUSH 0x31		// controlla se il carattere è 0x31  (codice ASCII di '1')
		IF_ICMPEQ fine		// se è stato inserito '1' lo restituisce al chiamante
					
nulla:  	POP			// se non è '0' né '1' lo butto via e torno a leggere un carattere
		GOTO leggicarattere	// busy waiting
		
fine: 		IRETURN 		// restituisce il carattere '0' o '1' inserito
.end-method

// *************************************************************
// stampa stringa per chiedere all'utente se vuole fare un'altra
// somma oppure terminare il programma
// *************************************************************
.method provaStampa()
	BIPUSH 0x50 			// P
	OUT
	BIPUSH 0x72 			// r
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x6D 			// m
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x72 			// r
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x20 			//  
	OUT
	BIPUSH 0x30 			// 0
	OUT
	BIPUSH 0x20 			//  
	OUT
	BIPUSH 0x70 			// p
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x72 			// r
	OUT
	BIPUSH 0x20 			//  
	OUT
	BIPUSH 0x74 			// t
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x72 			// r
	OUT
	BIPUSH 0x6D 			// m
	OUT
	BIPUSH 0x69 			// i
	OUT
	BIPUSH 0x6E 			// n
	OUT
	BIPUSH 0x61 			// a
	OUT
	BIPUSH 0x72 			// r
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x2C 			// ,
	OUT
	BIPUSH 0x20 			//  
	OUT
	BIPUSH 0x31 			// 1
	OUT
	BIPUSH 0x20 			//  
	OUT
	BIPUSH 0x70 			// p
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x72 			// r
	OUT
	BIPUSH 0x20 			//  
	OUT
	BIPUSH 0x63 			// c
	OUT
	BIPUSH 0x6F 			// o
	OUT
	BIPUSH 0x6E 			// n
	OUT
	BIPUSH 0x74 			// t
	OUT
	BIPUSH 0x69 			// i
	OUT
	BIPUSH 0x6E 			// n
	OUT
	BIPUSH 0x75 			// u
	OUT
	BIPUSH 0x61 			// a
	OUT
	BIPUSH 0x72 			// r
	OUT
	BIPUSH 0x65 			// e
	OUT
	BIPUSH 0x3A 			// :
	OUT
	BIPUSH 0x20 			//  
	OUT
        BIPUSH 0 			// valore fittizio da ritornare al chiamante
        IRETURN
.end-method
