// COSTANTI DA INSERIRE NEL SORGENTE PER UN CORRETTO FUNZIONAMENTO DEL METODO
.constant
 OBJREF 0x444
 ZERO 0x30  // ASCII '0'
 UNO 0x31  // ASCII '1'
NOVE 0x39 // ASCII '9'
UNMILIARDO 1000000000 // un miliardo (massima potenza di 10 in un numero su 32 bit) infatti 2^31-1 = 2.147.483.647
 EQ 0x3D
 GT 0x3E
 INVIO 0x0A // ASCII INVIO
.end-constant
.main
  BIPUSH 0x44 // D
  OUT
  BIPUSH 0x49 // I
  OUT
  BIPUSH 0x53 // S
  OUT
  BIPUSH 0x43 // C
  OUT
  BIPUSH 0x48 // H
  OUT
  BIPUSH 0x49 // I
  OUT
  BIPUSH 0x3A // :
  OUT
  LDC_W OBJREF // legge numero di dischi
  BIPUSH 2 // massimo 2 cifre
  INVOKEVIRTUAL LeggiDecimale // leggo il numero di dischi
  LDC_W OBJREF
  SWAP // sposto il numero di dischi in seconda posizione dopo OBJREF
  BIPUSH 1 // piolo di partenza
  BIPUSH 3 // piolo di arrivo
  INVOKEVIRTUAL torriHanoi
  LDC_W OBJREF
  SWAP
  INVOKEVIRTUAL StampaDecimale
  HALT
.end-main

// Metodo ricorsivo che stampa le mosse necessarie per spostare n dischi, 
// già posizionati dall'alto al basso in ordine crescente di dimensione,
// dal piolo a al piolo b utilizzando anche il piolo c come punto di appoggio
// intermedio e con il vincolo che non si può mai posizionare 
// un disco sopra ad uno più piccolo. 
// I pioli sono numerati 1, 2 e 3. Dati gli indici di 2 pioli (a e b) si può 
// calcolare l'indice del terzo come c=6-a-b
.method torriHanoi(n,a,b)
.var
c
.end-var
  ILOAD n // Se n=1: stampare mossa: a->b
  BIPUSH 1
  IF_ICMPEQ sposta
  BIPUSh 6 // calcola l'indice del terzo piolo = 6 - a - b
  ILOAD a
  ISUB
  ILOAD b
  ISUB
  ISTORE c // c contiene l'indice del terzo piolo (indici: 1, 2, 3)
  LDC_W OBJREF
  ILOAD n
  BIPUSH 1
  ISUB
  ILOAD a
  ILOAD c
  INVOKEVIRTUAL torriHanoi // richiama torriHanoi(n-1,a,c)
                           // ritorna sulla cima dello stack il numero di mosse
  LDC_W OBJREF 
  ILOAD a
  ILOAD b
  INVOKEVIRTUAL sposta // stampa lo spostamento di 1 disco dal piolo a al b:
                       // è ciò che farebbe torriHanoi(1,a,b)
                       // ma così si risparmia una INVOKEVIRTUAL
  IADD
  LDC_W OBJREF
  ILOAD n
  BIPUSH 1
  ISUB
  ILOAD c
  ILOAD b
  INVOKEVIRTUAL torriHanoi // richiama torriHanoi(n-1,c,b)
  IADD // aggiorna il numero di mosse
  IRETURN // restituisce il numero complessivo di mosse
sposta:
  LDC_W OBJREF
  ILOAD a
  ILOAD b
  INVOKEVIRTUAL sposta
IRETURN
.end-method 
.method sposta(i,j) // Il metodo stampa mossa: i => j
  ILOAD i
  LDC_W ZERO
  IADD
  OUT
  BIPUSH 0x20
  OUT
  LDC_W EQ
  OUT
  LDC_W GT
  OUT
  BIPUSH 0x20
  OUT
  ILOAD j
  BIPUSH 0x30
  IADD
  OUT
  BIPUSH 0x0A 
  OUT
  BIPUSH 1 // ritorna 1  cioè  il numero di mosse per spostare 
           // un disco solo dal piolo i al piolo j
  IRETURN
.end-method

// il metodo StampaDecimale(n) stampa il numero n utilizzando una rappresentazione in base 10
// il metodo è abbastanza efficiente perché evita di fare tante divisioni per 10
// ma utilizza le potenze di 10 per ottenere direttamente le cifre in ordine decrescente di peso
.method StampaDecimale(n)
.var
potenza  // contiene una potenza di 10
cont     // contiene il quoziente della divisione per potenza
.end-var
ILOAD n // metto n sullo stack per restituirlo alla fine
BIPUSH 1
DUP
ISTORE potenza
iniziowhile:
// while (n>potenza and potenza<1000000) - carica sullo stack le potenze del 10 <= o (fino al massimo 10^9)
// test condizione potenza < 1000000000 dato che al max e' 2.147.483.647
ILOAD potenza
LDC_W UNMILIARDO
ISUB
IFLT continua
GOTO fine_while
continua:
// test condizione n>potenza
ILOAD potenza
ILOAD n
ISUB
IFLT bodywhile
GOTO fine_while
bodywhile:
// moltiplico potenza per 10 e lo inserisco sullo stack
//   { potenza=potenza*10;PUSH potenza;} 
ILOAD potenza
DUP
IADD
DUP
DUP
IADD
DUP
IADD
IADD // sulla cima dello stack ho  potenza*2 + potenza*8 == potenza*10
DUP  // ne lascio una copia sullo stack e lo memorizzo in potenza
ISTORE potenza
GOTO iniziowhile
// ----------- FINE BODY DEL while che genera le potenze del 10
fine_while: // alla fine se n-potenza<0  si elimina dalla cima dello stack il valore di potenza più alto
ILOAD n     
ILOAD potenza
ISUB
IFLT riducipotenza
GOTO inizio_dowhile
riducipotenza:
POP

inizio_dowhile:
// do { POP potenza;
// if (potenza==1) stampa n+0x30; // siamo arrivati alle unità
DUP
ISTORE potenza
BIPUSH 1
IF_ICMPEQ stampa_unita
GOTO stampa_potenza_maggiore
stampa_unita:
ILOAD n
BIPUSH 0x30
IADD
OUT
GOTO fine_dowhile
stampa_potenza_maggiore:
// else {          -- siamo alla cifra di peso potenza
//                 -- calcolo quoziente e resto di n / potenza
//                 -- tramite una sequenza di sottrazioni
BIPUSH 0    // cont = 0;
ISTORE cont
//                    while (n>=potenza) {cont++;n=n-potenza}
divisione:
ILOAD n
ILOAD potenza
ISUB
DUP
IFLT n_minore
ISTORE n // n = n - potenza
IINC cont 1
GOTO divisione
n_minore:
POP // elimino la differenza negativa rimasta sullo stack
ILOAD cont                // stampa cont + 0x30; -- stampo il quoziente (cifra di peso potenza), 
BIPUSH 0x30
IADD
OUT
			  // in n rimane il resto (tutte le altre cifre di peso inferiore)
//         }      
fine_dowhile:
ILOAD potenza
BIPUSH 1
IF_ICMPEQ esci
GOTO inizio_dowhile
//  } while(potenza>1) 
esci: 
// restituisce il numero stesso passato come parametro 
// caricato inizialmente sul top of stack
IRETURN
.end-method


// metodo Leggidecimale(maxcifre) accetta in input fino a maxcifre cifre decimali
// e restituisce il corrispondente valore sul top dello stack.
// Per un corretto funzionamento, deve essere maxcifre<=10 inoltre 
// il numero inserito non può essere maggiore di 2.147.483.647
// per ora non faccio controllo sul valore vero e proprio.
// Utilizza il metodo LeggiCifraDecimale() incluso di seguito

.method LeggiDecimale(maxcifre)
// Legge un numero in base 10 di al massimo maxcifre, restituendo il corrispondente valore.
// Se vengono inserite maxcifre interrompe automaticamente la lettura di nuovi caratteri e restituisce
// il valore. Il carattere per indicare la fine dell'inserimento prima di aver raggiunto
// il limite maxcifre è INVIO (0x0A).
// Utilizza il metodo: LeggiCifraDecimale() 
// 
.var
cont
num
.end-var
    BIPUSH 0
    ISTORE num  // num=0
    ILOAD maxcifre
    ISTORE cont // maxcifre - massimo numero di cifre accettate
ciclo:  // while (cont>0)
    ILOAD cont
    IFEQ fineinvio // esco se ho già inserito maxcifre caratteri
nuovacifra:
    LDC_W OBJREF
    INVOKEVIRTUAL LeggiCifraDecimale // leggo da tastiera 1 carattere num. tra "0" e "9", o invio
checkinvio:   // verifica se è stato restituito il carattere Invio (che indica la fine dell'inserimento)
    DUP       // duplico in cima allo stack il carattere restituito dal metodo LeggiCifraOttale 
    LDC_W INVIO // per verificare se è stata letta una cifra oppure 0x0A=invio
    IF_ICMPEQ fine // se  la cima dello stack contiene invio esce dal ciclo
    LDC_W ZERO
    ISUB // trasformo il carattere ASCII nel suo valore (da 0 a 9) sottraendo il codice ASCII di '0'
    //---  MOLTIPLICA num PER 10 (lo faccio come somma di num*2 + num*8 (sarebbe più costoso realizzarlo con un ciclo di 10 somme)
    ILOAD num
    DUP
    IADD // ora sullo stack c'è num*2
    DUP 
    DUP
    IADD // ora sulle due posizioni affioranti dello stack c'è  num*2 e num*4 (quest'ultimo in mem[SP])
    DUP
    IADD // ora sulle due posizioni affioranti dello stack c'è  num*2 e num*8 (quest'ultimo in mem[SP])
    IADD // ora sulle cima dello stack c'è num*10
    // ----------- e ora sommo il valore dell'ultima cifra inserita
    IADD 
    ISTORE num // risultato finale: num=num*10+valore-in-cima-allo-stack
    IINC cont -1 // decremento cont per verificare se sono già state inserite maxcifre
    GOTO ciclo // fine while 
fineinvio:
    LDC_W INVIO // stampo invio se ho inserito il massimo numero di caratteri
    OUT
fine: 
    ILOAD num // carico in cima allo stack il valore calcolato per restituirlo al chiamante
    IRETURN
.end-method
// metodo LeggiCifraDecimale legge da tastiera un carattere e lo restituisce solo nel caso
// sia una cifra numerica tra '0' (ascii 0x30) e '9' (ascii 0x39)
// oppure l'invio (ascii 0x0A)

.method LeggiCifraDecimale()
    BIPUSH 0
retry:
    POP
    IN
    DUP
    IFEQ retry
    DUP
    LDC_W INVIO // tasto "invio"
    IF_ICMPEQ finechr
    DUP 
    DUP
    LDC_W ZERO
    ISUB
    IFLT retry // caso carattere con codifica < 0x30
    DUP
    LDC_W NOVE
    SWAP
    ISUB
    IFLT retry // caso carattere con codifica > 0x39
finechr:  
    DUP
    OUT // echo carattere
IRETURN
.end-method

